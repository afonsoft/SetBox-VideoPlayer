// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SetBoxWebUI.Repository;

namespace SetBoxWebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190906181135_AddDeviceLogAccesses")]
    partial class AddDeviceLogAccesses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Config", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConfigId")
                        .HasDefaultValue(new Guid("59609e07-3808-4674-901a-9614d82ca577"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreationDateTime")
                        .HasDefaultValue(new DateTime(2019, 9, 6, 15, 11, 34, 403, DateTimeKind.Local).AddTicks(7604));

                    b.Property<bool>("EnablePhoto")
                        .HasColumnName("EnablePhoto");

                    b.Property<bool>("EnableTransaction")
                        .HasColumnName("EnableTransaction");

                    b.Property<bool>("EnableVideo")
                        .HasColumnName("EnableVideo");

                    b.Property<bool>("EnableWebImage")
                        .HasColumnName("EnableWebImage");

                    b.Property<bool>("EnableWebVideo")
                        .HasColumnName("EnableWebVideo");

                    b.Property<int>("TransactionTime");

                    b.HasKey("ConfigId");

                    b.ToTable("SetBoxConfigs");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceId")
                        .HasDefaultValue(new Guid("6afb1cdc-2092-4217-892c-213d218c2c75"));

                    b.Property<Guid?>("ConfigurationConfigId");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreationDateTime")
                        .HasDefaultValue(new DateTime(2019, 9, 6, 15, 11, 34, 400, DateTimeKind.Local).AddTicks(7380));

                    b.Property<string>("DeviceIdentifier")
                        .IsRequired()
                        .HasColumnName("DeviceIdentifier")
                        .HasMaxLength(255);

                    b.Property<string>("Platform")
                        .HasColumnName("Platform")
                        .HasMaxLength(255);

                    b.Property<string>("Version")
                        .HasColumnName("Version")
                        .HasMaxLength(255);

                    b.HasKey("DeviceId");

                    b.HasIndex("ConfigurationConfigId");

                    b.ToTable("SetBoxDevices");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceLogAccesses", b =>
                {
                    b.Property<Guid>("DeviceLogAccessesId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<Guid?>("DeviceId");

                    b.Property<string>("IpAcessed");

                    b.Property<string>("Message");

                    b.HasKey("DeviceLogAccessesId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceLogAccesses");
                });

            modelBuilder.Entity("SetBoxWebUI.Repository.ApplicationIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SetBoxWebUI.Repository.ApplicationIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Device", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Config", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationConfigId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceLogAccesses", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Device")
                        .WithMany("LogAccesses")
                        .HasForeignKey("DeviceId");
                });
#pragma warning restore 612, 618
        }
    }
}
