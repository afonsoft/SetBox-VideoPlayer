// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SetBoxWebUI.Repository;

namespace SetBoxWebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190906194724_AddFileCheckSum")]
    partial class AddFileCheckSum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressId")
                        .HasDefaultValue(new Guid("68017fa0-6b11-4f84-95a3-1cef43122d66"));

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<string>("Street")
                        .HasColumnName("Street")
                        .HasMaxLength(1000);

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SetBoxAddress");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressId")
                        .HasDefaultValue(new Guid("1e403c33-c36e-4294-babb-d770f718956c"));

                    b.Property<string>("CNPJ")
                        .HasColumnName("CNPJ")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .HasColumnName("FullName")
                        .HasMaxLength(500);

                    b.HasKey("CompanyId");

                    b.ToTable("SetBoxCompany");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Config", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConfigId")
                        .HasDefaultValue(new Guid("fd4547a7-4ed9-4bf1-8423-e428adb5f89f"));

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreationDateTime")
                        .HasDefaultValue(new DateTime(2019, 9, 6, 16, 47, 23, 218, DateTimeKind.Local).AddTicks(1769));

                    b.Property<bool>("EnablePhoto")
                        .HasColumnName("EnablePhoto");

                    b.Property<bool>("EnableTransaction")
                        .HasColumnName("EnableTransaction");

                    b.Property<bool>("EnableVideo")
                        .HasColumnName("EnableVideo");

                    b.Property<bool>("EnableWebImage")
                        .HasColumnName("EnableWebImage");

                    b.Property<bool>("EnableWebVideo")
                        .HasColumnName("EnableWebVideo");

                    b.Property<int>("TransactionTime");

                    b.HasKey("ConfigId");

                    b.ToTable("SetBoxConfigs");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceId")
                        .HasDefaultValue(new Guid("326da4b4-9242-4c22-88db-4ed51bb6b754"));

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("ConfigurationConfigId");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreationDateTime")
                        .HasDefaultValue(new DateTime(2019, 9, 6, 16, 47, 23, 223, DateTimeKind.Local).AddTicks(9860));

                    b.Property<string>("DeviceIdentifier")
                        .IsRequired()
                        .HasColumnName("DeviceIdentifier")
                        .HasMaxLength(255);

                    b.Property<Guid?>("FileDevicesId");

                    b.Property<string>("License")
                        .HasColumnName("License")
                        .HasMaxLength(255);

                    b.Property<string>("Platform")
                        .HasColumnName("Platform")
                        .HasMaxLength(255);

                    b.Property<string>("Version")
                        .HasColumnName("Version")
                        .HasMaxLength(255);

                    b.HasKey("DeviceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConfigurationConfigId");

                    b.HasIndex("FileDevicesId");

                    b.ToTable("SetBoxDevices");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceFiles", b =>
                {
                    b.Property<Guid>("DeviceFilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceFilesId")
                        .HasDefaultValue(new Guid("b8f08b6a-4518-4d15-bf2e-4dd39a3052b5"));

                    b.Property<Guid?>("DeviceId");

                    b.HasKey("DeviceFilesId");

                    b.HasIndex("DeviceId");

                    b.ToTable("SetBoxDeviceFiles");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceLogAccesses", b =>
                {
                    b.Property<Guid>("DeviceLogAccessesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceLogAccessesId")
                        .HasDefaultValue(new Guid("d9934de6-5db7-40be-96c0-1141644ae0fd"));

                    b.Property<DateTime?>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreationDateTime")
                        .HasDefaultValue(new DateTime(2019, 9, 6, 16, 47, 23, 221, DateTimeKind.Local).AddTicks(1517));

                    b.Property<Guid?>("DeviceId");

                    b.Property<string>("IpAcessed")
                        .HasColumnName("IpAcessed");

                    b.Property<string>("Message")
                        .HasColumnName("Message")
                        .HasMaxLength(2000);

                    b.HasKey("DeviceLogAccessesId");

                    b.HasIndex("DeviceId");

                    b.ToTable("SetBoxDeviceLogAccesses");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.FileCheckSum", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileId")
                        .HasDefaultValue(new Guid("e31301a4-6259-4db0-9ec1-5ea298592e47"));

                    b.Property<string>("CheckSum");

                    b.Property<Guid?>("DeviceFilesId");

                    b.Property<string>("Extension")
                        .HasColumnName("Extension")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(255);

                    b.Property<long>("Size")
                        .HasColumnName("Size");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasMaxLength(4000);

                    b.HasKey("FileId");

                    b.HasIndex("DeviceFilesId");

                    b.ToTable("SetBoxFileCheckSum");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.FileDevices", b =>
                {
                    b.Property<Guid>("FileDevicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileDevicesId")
                        .HasDefaultValue(new Guid("2389091b-7326-4700-beba-13bfc2f2d2a7"));

                    b.Property<Guid?>("FileId");

                    b.HasKey("FileDevicesId");

                    b.HasIndex("FileId");

                    b.ToTable("SetBoxFileDevices");
                });

            modelBuilder.Entity("SetBoxWebUI.Repository.ApplicationIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SetBoxWebUI.Repository.ApplicationIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SetBoxWebUI.Repository.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Address", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Company")
                        .WithMany("Address")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.Device", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Company")
                        .WithMany("Devices")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SetBoxWebUI.Models.Config", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationConfigId");

                    b.HasOne("SetBoxWebUI.Models.FileDevices")
                        .WithMany("Devices")
                        .HasForeignKey("FileDevicesId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceFiles", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.DeviceLogAccesses", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.Device")
                        .WithMany("LogAccesses")
                        .HasForeignKey("DeviceId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.FileCheckSum", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.DeviceFiles")
                        .WithMany("Files")
                        .HasForeignKey("DeviceFilesId");
                });

            modelBuilder.Entity("SetBoxWebUI.Models.FileDevices", b =>
                {
                    b.HasOne("SetBoxWebUI.Models.FileCheckSum", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });
#pragma warning restore 612, 618
        }
    }
}
